/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ia2;

import java.awt.Button;
import java.awt.Point;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;

/**
 *
 * @author dintev
 */
public class Intefaz extends javax.swing.JFrame implements ActionListener {

    private JButton[][] botones;
    ImageIcon caballoBlanco;
    ImageIcon posicionBloqueada;
    ImageIcon caballoNegro;
    Mundo mundo;
    MinMax minmax;
    int profundidad;

    /**
     * Creates new form Intefaz
     */
    public Intefaz() {
        this.profundidad = 5;
        initComponents();
        this.mundo = new Mundo(profundidad);
        this.mundo.setPosicionMaquina(new Tuple(0, 0));
        this.setLayout(null);
        
        initSize(profundidad);


        /*
        Inicializacion de imagenes
        
         */
        this.posicionBloqueada = new ImageIcon(this.getClass().getResource("posicionBloqueada.png"));
        this.caballoBlanco = new ImageIcon(this.getClass().getResource("caballoBlanco.png"));
        this.caballoNegro = new ImageIcon(this.getClass().getResource("caballoNegro.png"));
        initCasillas(profundidad);
    }

    /**
     * Metodo que inicia el tama√±o de la ventana dependiendo de el nivel del
     * juego
     *
     * @param profundidad profundidad de minmax (4 - 6 - 8)
     *
     */
    public void initSize(int profundidad) {

        this.setSize(80 * profundidad + 10, 80 * profundidad + 29);

    }

    public void habilitarCasillasMovimientoHumano() {
    ArrayList<Tuple> posicionesDisponibles = this.mundo.getFunciones().posicionesPosiblesValidasCaballo(this.mundo.getEstado(),this.mundo.getHumano().posicion);
    for(Tuple posicionDisponible:posicionesDisponibles ){
        this.botones[posicionDisponible.x][posicionDisponible.y].setEnabled(true);
    }
    }

    public void remakeWorld(int profundidad) {
        FuncionesGenerales f = new FuncionesGenerales();
        System.err.println(profundidad);
        for (int i = 0; i < profundidad; i++) {
            for (int j = 0; j < profundidad; j++) {
                this.botones[i][j].setEnabled(false);
                switch (this.mundo.getEstado()[i][j]) {
                    case EnumEstadoMundo.OCUPADO_MIN:
                        botones[i][j].setIcon(caballoNegro);
                        break;
                    case EnumEstadoMundo.OCUPADO_MAX:
                        botones[i][j].setIcon(caballoBlanco);
                        break;
                    case EnumEstadoMundo.POSICION_BLOQUEADA:
                        botones[i][j].setIcon(posicionBloqueada);
                        break;
                }
            }
        }

    }

    @Override
    public void actionPerformed(ActionEvent e) {

        if (e.getSource().getClass().getSimpleName().equals("JButton")) {
            this.mundo.setPosicionHumano(new Tuple(((JButton) e.getSource()).getLocation().x / 80, ((JButton) e.getSource()).getLocation().y / 80));
            remakeWorld(this.profundidad);

            this.minmax = new MinMax(mundo.getEstado(), mundo.getMaquina().posicion, mundo.getHumano().posicion, profundidad);
            this.minmax.expandir();
            this.minmax.subir();
            this.mundo.setPosicionMaquina(minmax.nodoInicial.mejorMovimientoHijo);
            remakeWorld(this.profundidad);
            habilitarCasillasMovimientoHumano();
        }
    }

    public void initCasillas(int profundidad) {
        this.botones = new JButton[profundidad][profundidad];
        for (int i = 0; i < profundidad; i++) {
            for (int j = 0; j < profundidad; j++) {
                javax.swing.JButton jButtonTmp = new javax.swing.JButton();

                jButtonTmp.setLayout(null);
                jButtonTmp.setSize(80, 80);
                jButtonTmp.setMargin(null);
                jButtonTmp.setLocation(i * 80, j * 80);
                jButtonTmp.addActionListener(this);
                this.botones[i][j] = jButtonTmp;

            }
        }
        for (int i = 0; i < profundidad; i++) {
            for (int j = 0; j < profundidad; j++) {
                this.add(botones[i][j]);
            }
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Intefaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Intefaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Intefaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Intefaz.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new Intefaz().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
